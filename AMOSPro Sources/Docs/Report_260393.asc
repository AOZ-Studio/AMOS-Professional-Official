

  			AMOSPro Compiler report 26/03/1993


1. Job done.
~~~~~~~~~~~~
- AMOSPro 2.0 Library
- Commodore Conference (!)
- Foreword for User Guide
- Interface commands
- ARexx (to be tested thought)
- System commands
- Structures
- Editor
- Memory
- IFF Anim
- Graphics / Errors
- Floating Point
- Disc
- AA logo (in lowres yet, as we cannot open a 32 colours 
  hires screen yet...)

2. Still to do.
~~~~~~~~~~~~~~~
- Menus (1 day)
- Other small instructions ex: kill editor etc... (1/2 day)
- Check extensions with new library system (1 day)
- AMOS_System (in fact amos.library)

3. Where are we?
~~~~~~~~~~~~~~~~
On Wednesday 31st, the entiere instruction set will ve re-written
into a library. This library is to be used by both AMOSPro 2.0 and
the compiler.
On Wednesday, you'll be able to run AMOS programs under AMOSpro 2.0,
and therefore, I will send you a version for testing purpose: 
you can start to test the compiler library even with no compiler!

We are actually a bit ahead of the scheddule by 2 days.

4. What's next?
~~~~~~~~~~~~~~~
I want to finish APCmp FIRST before jumping into AA support, this will
enable us to test many programs using the compiler while I write
the AA support.
Then only, I will re-write the amos.library (AMOS_System in your
scheddule)
Jean-Baptiste has started to work on the compiler shell today. I imagine
he will be finished when I finish APcmp.
So in 12 days from next wednesday, you will have the compiler almost
finished, with the shell, the options, and its final behaviour : 
the manual can be started quite soon. 
Once more, as soon as you have 

* 31/03/93: AMOSPro.Lib finished
* 12/04/93: APCmp + Compiler.AMOS finished, with graphics.

5. The AGA logo.
~~~~~~~~~~~~~~~~
Jean Baptiste has worked on it this morning. You will find in AA_Logo.AMOS
the result of this work. You must realise that the picture is a 32 
colours LOWRES on AMOS, but the finished one will be in HIRES: 
the display is by far sharper and better.
I will in fact implement a new wicked option in AMOSPro: if you want,
AMOSPro will automatically load a program from the APSystem folder
(here AA_Logo.AMOS) before loading the editor. This program will be
in fact a title.
Very fun for the user, as he will be able to change this program to put
his face in it.
Very good for me, as I don't see myself re-writing the colour animation
of AA_logo in machine langage.

6. List of instructions done & tested.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Small comments for internal use!

 = abs:
 = acos: 	retourne '++++++++++++++++' si on entre abs(valeur)>1 
 = amalerr:
 = amos here:
 = array:
 = asc:
 = asin: 	retourne '++++++++++++++++' si on entre abs(valeur)>1 
 = at:
 = atan:
 = bin$:
 = bob col:
 = border$:
 = btst:
 = cdown$:
 = chanan:
 = chanmv:
 = chip free:
 = chr$:
 = cleft$:
 = cmove$:
 = col:
 = cos:
 = cright$:
 = cup$:
 = deek:
 = dev first$:
 = dev next$:
 = dfree:
 = dialog:
 = dialog box:
 = dialog run:
 = dir first$:
 = dir next$:
 = disc info$:
 = display height:
 = drive:
 = edialog:
 = eof:
 = err$:
 = errn:
 = errtrap:
 = exist: 	ENHANCED!
 = exp:
 = false:
 = fast free:
 = fire:
 = flip$:
 = font$:
 = frame length:
 = frame load:
 = frame param:
 = frame play:
 = frame skip:
 = fsel$:
 = hardcol:
 = hcos:
 = hex$:
 = hires:
 = hrev:
 = hsin:
 = htan:
 = hunt:
 = hzone:
 = i bob:
 = i sprite:
 = icon base:
 = inkey$:
 = input$:
 = instr:
 = int:
 = jdown:
 = jleft:
 = joy:
 = jright:
 = jup:
 = key shift:
 = key state:
 = laced:
 = leek:
 = left$:
 = len:
 = length:
 = ln:
 = lof:
 = log:
 = logbase:
 = logic:
 = lower$:
 = lowres:
 = max:
 = mid$:
 = min:
 = mouse click:
 = mouse key:
 = mouse screen:
 = mouse zone:
 = movon:
 = ntsc:
 = paper$:
 = param:
 = param#:
 = param$:
 = peek:
 = peek$: 
 = pen$:
 = phybase:
 = physic:
 = pi#:
 = picture:
 = point:
 = port:
 = prg first$: 	retourne les devices!
 = prg next$: 	retourne les devices!
 = psel$: 	retourne les devices!
 = rdialog:
 = rdialog$:
 = repeat$:
 = resource$:
 = rev: 
 = right$:
 = rnd:
 = scan$:
 = scancode:
 = scanshift:
 = scin:
 = screen base:
 = screen colour:
 = screen height:
 = screen mode:
 = screen width:
 = sgn:
 = sin:
 = space$:
 = sprite base:
 = sprite col:
 = spritebob col:
 = sqr:
 = start:
 = str$:
 = string$:
 = tab$:
 = tan:
 = text base:
 = text length:
 = text styles:
 = true:
 = upper$:
 = varptr:
 = vrev:
 = windon:
 = x bob:
 = x curs:
 = x graphic:
 = x hard:
 = x screen:
 = x sprite:
 = x text:
 = xgr:
 = y bob:
 = y curs:
 = y graphic:
 = y hard:
 = y screen:
 = y sprite:
 = y text:
 = ygr:
 = zone:
 = zone$:
 i \\\\\\\\\\\\\\\/:
 i add:
 i amos lock:
 i amos to back:
 i amos to front:
 i amos unlock:
 i appear: 
 i append:
 i as:
 i assign:
 i auto view off:
 i auto view on:
 i autoback:
 i bank shrink: 
 i bank swap:
 i bar:
 i bchg:
 i bclr:	
 i bload:
 i bob:
 i bob clear:
 i bob draw:
 i bob off:
 i bob update:
 i bob update off:
 i bob update on:
 i border: 	ok, mais border zarbi si windopen sans border au depart
 i box:
 i break off:
 i break on:
 i bsave:
 i bset:
 i cdown:
 i centre:
 i change mouse:
 i channel:
 i circle:
 i clear key:
 i cleft:
 i cline:
 i clip:
 i close:
 i close editor:
 i close workbench: (ne marche pas car autres progs lancés sous WB...)
 i cls:
 i clw:
 i cmove:
 i colour:
 i colour back:
 i copy:
 i cright:
 i cup:
 i curs off:
 i curs on:
 i curs pen:
 i dec:
 i def scroll:
 i default:
 i default palette:
 i degree:
 i del block:
 i del bob:
 i del cblock:
 i del icon:
 i del sprite:
 i dialog close:
 i dialog clr:
 i dialog freeze:
 i dialog open:
 i dialog unfreeze:
 i dialog update:
 i dim:
 i dir:
 i dir/w:
 i direct:
 i doke:
 i double buffer:
 i draw:
 i draw to:
 i dual playfield:
 i dual priority:
 i edit:
 i ellipse:
 i erase: 
 i erase all:
 i erase temp:
 i error:
 i every:
 i every off:
 i every on: 
 i fade:
 i field:
 i fill:
 i fix:
 i flash:
 i flash off:
 i follow:
 i follow off:
 i freeze:
 i get:
 i get block:
 i get bob:
 i get bob palette:
 i get cblock:
 i get disc fonts:
 i get fonts:
 i get icon:
 i get icon palette:
 i get palette:
 i get rom fonts:
 i get sprite:
 i get sprite palette:
 i gr locate:
 i gr writing:
 i hide:
 i hide on:
 i home:
 i hot spot:
 i hrev block:
 i hscroll:
 i hslider:
 i iff anim:
 i inc:
 i ink:
 i input:
 i ins bob: 	ok mais insere un bob flanbinette!
 i ins icon:
 i ins sprite: 	ok mais insere un sprite flanbinette!
 i inverse off:
 i inverse on:
 i key speed:
 i kill:
 i limit bob:
 i limit mouse:
 i line input:
 i list bank:
 i load:
 i load iff:
 i locate:
 i loke:
 i make icon mask:
 i make mask:
 i mask iff:
 i memorize x:
 i memorize y:
 i mkdir:
 i multi wait:
 i no icon mask:
 i no mask:
 i open in:
 i open out:
 i open port:
 i open random:
 i paint: 
 i palette:
 i paper:
 i parent:
 i paste bob:
 i paste icon:
 i pen:
 i pload:
 i plot:
 i poke:
 i poke$:
 i polygon:
 i polyline:
 i pop:
 i print:
 i priority off:
 i priority on:
 i priority reverse off:
 i priority reverse on:
 i put:
 i put block:
 i put bob:
 i put cblock:
 i put key:
 i radian:
 i rainbow:
 i rainbow del:
 i randomize:
 i remember x:
 i remember y:
 i rename:
 i reserve as chip data:
 i reserve as chip work:
 i reserve as data:
 i reserve as work:
 i reserve zone:
 i reset zone:
 i resource bank:
 i resource screen open:
 i resource unpack:
 i resume next:
 i return:
 i rol.b:
 i rol.l:
 i rol.w:
 i ror.b:
 i ror.l:
 i ror.w:
 i save:
 i save iff:
 i screen:
 i screen clon8: ok mais renvoie 'Block not defined' si 2 fois de suite   
 i screen clos8:
 i screen copy:
 i screen display:
 i screen hide:
 i screen offset:
 i screen open:
 i screen show:
 i screen swap:
 i screen to back:
 i screen to front:
 i scroll:
 i scroll off:
 i scroll on:
 i set bob:
 i set curs:
 i set dir:
 i set dir:
 i set double precision:
 i set equate bank:
 i set font: 
 i set hardcol:
 i set input:
 i set line:
 i set paint:
 i set pattern:
 i set rainbow:
 i set slider:
 i set sprite buffer:
 i set stack:
 i set tab:
 i set tempras:
 i set text: 
 i set zone:
 i shade off:
 i shade on:
 i shift down:
 i shift off:
 i shift up:
 i show:
 i show on:
 i sprite:
 i sprite off:
 i sprite priority:
 i sprite update:
 i sprite update off:
 i sprite update on:
 i synchro:
 i synchro off:
 i synchro on:
 i system:
 i text: 
 i title bottom:
 i title top:
 i trap:
 i under off:
 i under on:
 i unfreeze:
 i update:
 i update every:
 i update off:
 i update on:
 i using:
 i view:
 i vrev block:
 i vscroll:
 i vslider:
 i wait:
 i wait key:
 i wait vbl:
 i wind close:
 i wind move:
 i wind open:
 i wind save:
 i wind size:
 i window:
 i writing:
 i zoom:
 s ':
 s ::
 s data:
 s def fn:
 s do:
 s else:
 s else if:
 s end if:
 s end proc:
 s exit:
 s exit if:
 s fn:
 s for:
 s global:
 s gosub:
 s goto:
 s if:
 s input #:
 s line input #:
 s loop:
 s next:
 s not:
 s on:
 s on break proc:
 s on error:
 s pop proc:
 s print #:
 s proc:
 s procedure:
 s read:
 s rem:
 s repeat:
 s restore:
 s resume:
 s resume label:
 s screen size:
 s shared:
 s swap:
 s then:
 s to:
 s until:
 s wend:
 s while:
 v amreg:
 v areg:
 v dir$:
 v dreg:
 v key$:
 v pof:
 v rain:
 v timer:
 v vdialog:
 v vdialog$:
 v x mouse:
 v y mouse:
